package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short SUB = 1;
    public static final short RPAR = 2;
    public static final short ID = 3;
    public static final short SEMICOL = 4;
    public static final short CMA = 5;
    public static final short LPAR = 6;
    public static final short ADD = 7;
    public static final short INT = 8;
    public static final short NUMERAL = 9;
    public static final short NEQ = 10;
    public static final short EQ = 11;
    public static final short GEQ = 12;
    public static final short GTR = 13;
    public static final short LEQ = 14;
    public static final short LSS = 15;
    public static final short MOD = 16;
    public static final short MUL = 17;
    public static final short DIV = 18;
    public static final short RBLOCK = 19;
    public static final short LIST = 20;
    public static final short IF = 21;
    public static final short RETURN = 22;
    public static final short WHILE = 23;
    public static final short ASSIGN = 24;
    public static final short LBLOCK = 25;
    public static final short RBRACK = 26;
    public static final short ELSE = 27;
    public static final short LBRACK = 28;

    public static final String[] NAMES = {
        "EOF",
        "SUB",
        "RPAR",
        "ID",
        "SEMICOL",
        "CMA",
        "LPAR",
        "ADD",
        "INT",
        "NUMERAL",
        "NEQ",
        "EQ",
        "GEQ",
        "GTR",
        "LEQ",
        "LSS",
        "MOD",
        "MUL",
        "DIV",
        "RBLOCK",
        "LIST",
        "IF",
        "RETURN",
        "WHILE",
        "ASSIGN",
        "LBLOCK",
        "RBRACK",
        "ELSE",
        "LBRACK",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Program(new List());
      }
    },
    new Action() { // [1] program =  funcdecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [2] funcdecl_list =  funcdecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FuncDecl a = (FuncDecl) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [3] id_decl =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new IdDecl(a);
      }
    },
    new Action() { // [4] funcdecl_list =  funcdecl_list funcdecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final FuncDecl b = (FuncDecl) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [5] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [6] opt_param_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [7] param_list =  id_param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdParam a = (IdParam) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    Action.RETURN, // [8] opt_param_list =  param_list (default action: return symbol 1)
    new Action() { // [9] id_param =  INT id_decl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        return new IdParam(a);
      }
    },
    new Action() { // [10] param_list =  param_list CMA id_param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol CMA = _symbols[offset + 2];
        final IdParam b = (IdParam) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
    new Action() { // [11] opt_stmt_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [12] funcdecl =  INT id_decl LPAR opt_param_list RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List b = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Block c = (Block) _symbols[offset + 6].value;
        return new FuncDecl(a,b,c);
      }
    },
    Action.RETURN, // [13] id_declaration =  listdecl (default action: return symbol 1)
    Action.RETURN, // [14] stmt =  funcstmt (default action: return symbol 1)
    new Action() { // [15] id_use =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new IdUse(a);
      }
    },
    Action.RETURN, // [16] opt_stmt_list =  stmt_list (default action: return symbol 1)
    new Action() { // [17] stmt_list =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [18] opt_list_assign = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Opt();
      }
    },
    new Action() { // [19] block =  LBLOCK opt_stmt_list RBLOCK
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBLOCK = _symbols[offset + 1];
        final List a = (List) _symbols[offset + 2].value;
        final Symbol RBLOCK = _symbols[offset + 3];
        return new Block(a);
      }
    },
    Action.RETURN, // [20] factor =  negative_expr (default action: return symbol 1)
    Action.RETURN, // [21] comp =  term (default action: return symbol 1)
    new Action() { // [22] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Numeral(a);
      }
    },
    Action.RETURN, // [23] term =  factor (default action: return symbol 1)
    Action.RETURN, // [24] expr =  comp (default action: return symbol 1)
    new Action() { // [25] opt_arg_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [26] stmt =  id_declaration SEMICOL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDeclaration a = (IdDeclaration) _symbols[offset + 1].value;
        final Symbol SEMICOL = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [27] stmt =  assign SEMICOL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Assign a = (Assign) _symbols[offset + 1].value;
        final Symbol SEMICOL = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [28] funcstmt =  funccall SEMICOL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FuncCall a = (FuncCall) _symbols[offset + 1].value;
        final Symbol SEMICOL = _symbols[offset + 2];
        return new FuncStmt(a);
      }
    },
    new Action() { // [29] opt_assign = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Opt();
      }
    },
    new Action() { // [30] stmt_list =  stmt_list stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [31] listdecl =  LIST id_decl opt_list_assign
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LIST = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        final Opt b = (Opt) _symbols[offset + 3].value;
        return new ListDeclaration(a,b);
      }
    },
    new Action() { // [32] negative_expr =  SUB factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol SUB = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        return new NegativeExpr(a);
      }
    },
    new Action() { // [33] return =  RETURN expr SEMICOL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Symbol SEMICOL = _symbols[offset + 3];
        return new Return(a);
      }
    },
    Action.RETURN, // [34] opt_arg_list =  arg_list (default action: return symbol 1)
    new Action() { // [35] arg_list =  expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [36] assign =  id_use ASSIGN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Assign(a,b);
      }
    },
    new Action() { // [37] id_realdecl =  INT id_decl opt_assign
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        final Opt b = (Opt) _symbols[offset + 3].value;
        return new IdReadDecl(a,b);
      }
    },
    new Action() { // [38] opt_list_assign =  ASSIGN list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ASSIGN = _symbols[offset + 1];
        final MyList a = (MyList) _symbols[offset + 2].value;
        return new Opt(a);
      }
    },
    new Action() { // [39] term =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mul(a,b);
      }
    },
    new Action() { // [40] term =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Div(a,b);
      }
    },
    new Action() { // [41] term =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mod(a,b);
      }
    },
    new Action() { // [42] expr =  comp GEQ comp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Geq(a,b);
      }
    },
    new Action() { // [43] expr =  comp GTR comp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GTR = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Gtr(a,b);
      }
    },
    new Action() { // [44] expr =  comp LSS comp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LSS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Lss(a,b);
      }
    },
    new Action() { // [45] expr =  comp LEQ comp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Leq(a,b);
      }
    },
    new Action() { // [46] comp =  comp ADD term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol ADD = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Add(a,b);
      }
    },
    new Action() { // [47] expr =  comp NEQ comp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol NEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Neq(a,b);
      }
    },
    new Action() { // [48] comp =  comp SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Sub(a,b);
      }
    },
    new Action() { // [49] expr =  comp EQ comp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Eq(a,b);
      }
    },
    new Action() { // [50] list =  LPAR opt_arg_list RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final List a = (List) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return new MyList(a);
      }
    },
    new Action() { // [51] factor =  LPAR expr RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return a;
      }
    },
    new Action() { // [52] funccall =  id_use LPAR opt_arg_list RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final List b = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FuncCall(a,b);
      }
    },
    new Action() { // [53] opt_assign =  ASSIGN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ASSIGN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        return new Opt(a);
      }
    },
    new Action() { // [54] listcall =  id_use LBRACK numeral RBRACK
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol LBRACK = _symbols[offset + 2];
        final Numeral b = (Numeral) _symbols[offset + 3].value;
        final Symbol RBRACK = _symbols[offset + 4];
        return new ListCall(a, b);
      }
    },
    new Action() { // [55] arg_list =  arg_list CMA expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol CMA = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
    new Action() { // [56] opt_else = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Opt();
      }
    },
    new Action() { // [57] while =  WHILE LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr a = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        return new While(a,b);
      }
    },
    new Action() { // [58] if =  IF LPAR expr RPAR block opt_else
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr a = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        final Opt c = (Opt) _symbols[offset + 6].value;
        return new If(a,b,c);
      }
    },
    new Action() { // [59] opt_else =  ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ELSE = _symbols[offset + 1];
        final Block a = (Block) _symbols[offset + 2].value;
        return new Opt(a);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjMrbm54KO$hARR99Dmds68u4SG08XX3CG20YYeAA2Y2WUY8YA2XvW#U1HFcbvLFcY3vR" +
    "bY#M3nuDLLkc33vuWzts8o24WzoatQFlDx7HcPtfcTxOtP47flxw$U$x#l$xxx#cPFGSegX" +
    "S2sOWW3srGW7ReW13w8WTZn8#u3uKOXp0UH2iKepi6e0ur68OgJCGWF8DSF8kPM8Gkw84Ib" +
    "E4v0AMeH5TKe0ywnVdFeZzG3gk8V#BwxcTVAEvu88#hCGI3NJ4VCCOGVrj3M37Dur8qMZ7L" +
    "KQQQtdVWJkHxz4xpi4qt6NUH8KlKm#jk3ziCb#qHSPaplco8ulsGo$AeuMiNSGbm7Rj7cAr" +
    "O7ZOzBohsEOfbhcAPH#Q5k8157lazJRldUedpnWfJgxqBaR28SsRLEh6NPydLuCHAMsrcaI" +
    "vHdBLrYgMzTimpjawnz6vgzV8S#JGweXiwewVIyrVYumH5$tpsqsRMGkOwrDJz0pE7QySSe" +
    "SqS6S2dtjCwIZjcWovHdDAEELexvacrvUoNqdnC$NqhJeWJCHrhsMrRuhtjEetP9hkoZ$jU" +
    "sVfhUqnjEVkbA3tQUqWS3UWuLc4UiRMpvVIIOdk9m#AmhKthORVupFQGE6HhQP622RW1uts" +
    "O1yL1MqkBKzmCgxPdEpA5sTwOLfu7n05RIujJl9dwT#eqPglDn4r1PwUKAM8$u#mtD6urBR" +
    "VXTjoCIRW5anCoQyMVBRv2#zIMir#AqhDNRJdxfIXT#g$PsYkKnkxRexQS$LAQCUOV0HtlK" +
    "PYxrPQpNuhITM$GsIbZxj9bfhCJCi0CxkagOgVOQMjfSOeFSuVQSlPBKRgkhRMzpanM7Wli" +
    "wIhYTxDwN8FwXCdVhX7pDureiJ9VbnYRfyviyQHkJ3obpTH$TTYc7rFx7SQlkY75Lh7LrjB" +
    "Y51$c5h75rjBY51$cPh7PrjBY59$fBj3Da#$xDZ7E9aDRx$k2CpUIkT7GAJCtaBd1q2aprv" +
    "Evtj2fCSKwiSxMqY8bqISTnbnBxxM6JZ7c6h76rj8Y9KdCrVHURUWKOwuIgsmjBKxneUfVs" +
    "Il5IbjBYrDyc2l42bjBYrDyWcf$Evd6zvhBjPdBn39RIujJV9Y$s3h5c4lLbhDVYcLulgbd" +
    "YTfoC9T8KNf#LblEVYbAb$vP#KbjEVkby60W#fgefVH17biZY94eHJs6OmnAC1ezqDD42Qs" +
    "zU4MKqJDCZ2AgULKCG0qQXC0Wr64mXl1g6URqPr#Zi0fZEiVASnsNemALQao3QOqWO#OvOd" +
    "gCOdhtGvKIquxXmsYQRIGeKx65pD$pSZn7S5kwYBWYysmwzbeXnUAvjfwUNbnZjWdZSMLyh" +
    "25pXNFyLjE$n68Y9x6N9pESEYS#fXOpBxsOMdbspK3CfhNrpfZtfGxeY4xehFGe#pRrcAaM" +
    "jDTcPicuY9WwFp0pMpkcFZCImAUBfpK0qsUygpHF7wR#lcq6Pge5MN6l3xcc9Oe25A88hT0" +
    "QRT0MxUAyhJEBxfdEimMPLtptgTTBx0wMwfpHBVvyKYSzduxHMf29OZSpoEvhOdVFL9xQT#" +
    "fCp5P$toQCcOpPuYkKYNj2MZj1bwaTCnDvwj$xz6URYNSOQUo43303UwenCt1zNbjhUvsPZ" +
    "Ad$cLV$KwG#K$#UaB4yzMDgCJFnoLN$zVCAlH#wMjvJDp6Bco$F$mjJ$wpyLsFglpfaOCVh" +
    "Vpkfpyp4tQJ5lairladGO#h7ZElHFok1Om9O$AhzKrGnOl#bdu7Ohsrl4fyJnc#S1u2iC55" +
    "AZ2Pc4YyGxn1V4byJXu5GBj6764TC8LuYtYU#8jOGHu1m0T6N64$C8JY5y8V4jyGMuZIGtP" +
    "Qe8IOJyuZNYO#9xuaTn2KWfminb9XAB23U8ZuXbX1xW0Yd7Ub6Z22OKuGvHTubc5E4EKNs0" +
    "RdCARS7qK3C8buatYC#8zOIp2alIZ2dl0d4RE9buWFY6s8JSHB8RqLK4nE9kSHhn4S4SyhV" +
    "HZ2dQ0U2EKMvBj7v17EASixH7uYTn6MWe2inZ9X6B2JU9ZubbX9xWS8iWeaLbX7JYKK4Soh" +
    "yWbXEx2UE0KMzZFFAaxsUs4PiV8NA2ooRujhRhNgpLU#owhDMlTkeENIbttYkiVV8DZcrhh" +
    "wjIRZdtJQECSbrRFnNqtY#Qv5rR5HxBVvHozQ6CFwtNyV3Kt5SdcTmt#8xmlW7m1k4yJyJd" +
    "ZViI9ORVOvRzSKWQ#4zHbP#NBvdY7EkDJWOrxvWnLki#rlqDLeQp6U3Hl0rOmpHrwn3l5E5" +
    "p2TYwdaycgZbSJt2uDM3WRpugsch8teGmuX6mdWwoVYrl3VR5KG9KKvK4iRJKdKSeyvywZ9" +
    "aFXlKoBe$$Nkn7iIw7$sgYC5i3oM6qrxEMgBIXGfNNMh63dCtPdFy4CfOL$7OU9ge1ZaOmd" +
    "atq3xsNz$TCcO=");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
