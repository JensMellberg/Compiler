Program ::= FuncDecl*;

abstract Expr;
abstract Stmt;

Assign : Stmt ::= IdUse Expr;

If : Stmt ::= Expr First:Block [Second:Block];
While : Stmt ::= Expr Block;
Return : Stmt ::= Expr;
FuncStmt : Stmt ::= FuncCall;
FuncCall : Expr ::= IdUse Expr*;
Add : Expr ::= Left:Expr Right:Expr;
Sub : Expr ::= Left:Expr Right:Expr;
Mul : Expr ::= Left:Expr Right:Expr;
Div : Expr ::= Left:Expr Right:Expr;
Mod : Expr ::= Left:Expr Right:Expr;
Eq : Expr ::= Left:Expr Right:Expr;
Geq : Expr ::= Left:Expr Right:Expr;
Leq : Expr ::= Left:Expr Right:Expr;
Neq : Expr ::= Left:Expr Right:Expr;
Lss : Expr ::= Left:Expr Right:Expr;
Gtr : Expr ::= Left:Expr Right:Expr;
IdReadDecl : Stmt ::= IdDecl;
FuncDecl ::= IdDecl Block;
Numeral : Expr ::= <NUMERAL>;
IdUse : Expr ::= <ID>;
IdDecl ::= <ID>;
Block ::= Stmt*;
